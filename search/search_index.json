{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home # Welcome to Software Notes. What is this about? # About my notes of Software Engineering from the University of M\u00e1laga . Why public? # I would like these notes to be useful to others . Why in English? # To improve my English and to make this website more accessible to everyone . What topics will be covered? # Web engineering Formal methods Mobile development Embedded systems Project management","title":"Home"},{"location":"#home","text":"Welcome to Software Notes.","title":"Home"},{"location":"#what-is-this-about","text":"About my notes of Software Engineering from the University of M\u00e1laga .","title":"What is this about?"},{"location":"#why-public","text":"I would like these notes to be useful to others .","title":"Why public?"},{"location":"#why-in-english","text":"To improve my English and to make this website more accessible to everyone .","title":"Why in English?"},{"location":"#what-topics-will-be-covered","text":"Web engineering Formal methods Mobile development Embedded systems Project management","title":"What topics will be covered?"},{"location":"embedded_systems/introducction/","text":"Introducction # Glossary # Acronyms # ASIC Application-Specific Integrated Circuit. FPGA : Field-Programmable Gate Array. GPS : Global Positioning System. IDE : Integrated Development Dnvironment. OS : Operating System. POSIX : Portable Operating System Interface. RT : Real Time. UI : User Interface. What are embedded systems? # A system with a programmable computer , but not general purpose. Where they are? # It is estimated that there are an average of 40 embedded systems per house. Automotive : Engine control, braking system, etc. Home electronics : Washing machine, refrigerator, microwave, toaster, etc. Consumer electronics : Mobile phones, mp3, ebooks, tv, cameras, gps, etc. Industrial control : Manufacturing control systems, sensors, etc. Medical : Dialysis machines, cardiac monitors, etc. Office : Fax, photocopier, printers, etc. Many systems are composed of several embedded systems, i.e. mobile phones. Architecture # Layer Components Application services, UI Middleware frameworks, protocols Platform Controlers, OS Hardware Microcontrolers, peripherals Characteristics # Unique function : A single function performed repeatedly. Reliable : Minimun error probability, maintainability, disponibility, secure connections. Limited resources : Manufacturing cost, size (physical and memory), energy consumption, eficiency. RT : Reponse time limited. Reactive : Input by sensors, output by actuators. Complex algorithms : Physical environment with which they interact interact with is complex. UI : Dedicated interfaces, i.e. pedals, steering wheels, buttons, etc. Multi rate : Some tasks must be performed in RT , others do not. No all embedded systems have all the characteristics. Clasification # Usually classified as small, medium and sophisticated. characteristic \\ classification Small Medium Sophisticated Processor 8 and 16 bits 16, 32 and 64 bits FPGA , ASIC Hardware complexity Low complexity peripherals, interfaces, etc. Designers Software complexity No complex operations Medium size Software Designers must be experts Tools disponibility Programmed in a simple environment Debugger, compilers and / or IDE Complete environment needed Examples Calculator Washing machine, microwave Robots, braking and landing Topics about embedded systems # Architecture and OS of embedded systems. Software: POSIX , RT and planning. Firmware for Arduino .","title":"Introducction"},{"location":"embedded_systems/introducction/#introducction","text":"","title":"Introducction"},{"location":"embedded_systems/introducction/#glossary","text":"","title":"Glossary"},{"location":"embedded_systems/introducction/#acronyms","text":"ASIC Application-Specific Integrated Circuit. FPGA : Field-Programmable Gate Array. GPS : Global Positioning System. IDE : Integrated Development Dnvironment. OS : Operating System. POSIX : Portable Operating System Interface. RT : Real Time. UI : User Interface.","title":"Acronyms"},{"location":"embedded_systems/introducction/#what-are-embedded-systems","text":"A system with a programmable computer , but not general purpose.","title":"What are embedded systems?"},{"location":"embedded_systems/introducction/#where-they-are","text":"It is estimated that there are an average of 40 embedded systems per house. Automotive : Engine control, braking system, etc. Home electronics : Washing machine, refrigerator, microwave, toaster, etc. Consumer electronics : Mobile phones, mp3, ebooks, tv, cameras, gps, etc. Industrial control : Manufacturing control systems, sensors, etc. Medical : Dialysis machines, cardiac monitors, etc. Office : Fax, photocopier, printers, etc. Many systems are composed of several embedded systems, i.e. mobile phones.","title":"Where they are?"},{"location":"embedded_systems/introducction/#architecture","text":"Layer Components Application services, UI Middleware frameworks, protocols Platform Controlers, OS Hardware Microcontrolers, peripherals","title":"Architecture"},{"location":"embedded_systems/introducction/#characteristics","text":"Unique function : A single function performed repeatedly. Reliable : Minimun error probability, maintainability, disponibility, secure connections. Limited resources : Manufacturing cost, size (physical and memory), energy consumption, eficiency. RT : Reponse time limited. Reactive : Input by sensors, output by actuators. Complex algorithms : Physical environment with which they interact interact with is complex. UI : Dedicated interfaces, i.e. pedals, steering wheels, buttons, etc. Multi rate : Some tasks must be performed in RT , others do not. No all embedded systems have all the characteristics.","title":"Characteristics"},{"location":"embedded_systems/introducction/#clasification","text":"Usually classified as small, medium and sophisticated. characteristic \\ classification Small Medium Sophisticated Processor 8 and 16 bits 16, 32 and 64 bits FPGA , ASIC Hardware complexity Low complexity peripherals, interfaces, etc. Designers Software complexity No complex operations Medium size Software Designers must be experts Tools disponibility Programmed in a simple environment Debugger, compilers and / or IDE Complete environment needed Examples Calculator Washing machine, microwave Robots, braking and landing","title":"Clasification"},{"location":"embedded_systems/introducction/#topics-about-embedded-systems","text":"Architecture and OS of embedded systems. Software: POSIX , RT and planning. Firmware for Arduino .","title":"Topics about embedded systems"},{"location":"formal_methods/introducction/","text":"Introduction # Glossary # Definitions # Formal methods : Logical and mathematical reasoning about the software. Equivalence class : Subset of the input domain which causes the software to behave in the same way for all of them \u2014i.e. correct passwords is an equivalence class, all of them resulting in a correct login. Acronyms # RT : Real Time. I/O : Input/Output. Synonyms # Bug (informal but short) / Software failure (formal but long). GUI : Graphical user interface. Formal methods - The good part # Goals # Reliability Security & Safety Robustness Verification Efficiency Usage # Definition of unambiguous requirements. (ease communication) Better systems understanding and testing . Lower development and maintenance cost . Model benefits : Compile model to implementation, equivalence of models, etc. Software problems it solves # There are some software problems that formal methods solve: When software reaches an inconsistent state (probably a bug ), rebooting is usually the easiest solution. But many systems cannot be rebooted. So it is important to ensure that the system will not reach inconsistent states. Many systems are critical and RT . An error in one of these systems implies very high risk\u2014i.e. physical damage to people, fatalities, environmental damage, legal consequences, high monetary costs, etc. So it is essential to verify that there are no software faults. Most software works with infinite data domains , and it is even difficult to find all equivalence classes (use cases). Experimental test ( I/O ) usually focuses on covering all equivalence classes with at least one test for each equivalence class . Most of the software bugs comes from unexpected input, belonging to an untested equivalence class\u2014probably because it had not been contemplated. So it is crucial to find all equivalence classes . Formal methods can find all of them. It is desirable to prove properties for the equivalence classes. But typically they are either \u201cproved\u201d inductively\u2014by testing with at least one value of the equivalence class and assuming true for the rest of the equivalence class\u2014or proved manually (non-automatically) for each desired property. So it would be useful to prove all \u2014even properties that had not been thought of (maybe undesirable)\u2014posible properties of the system automatically. Formal methods can do it. Formal methods - The bad part # If it is so useful, why is it not used so much? Verification limitations # The requirements or specification may be incorrect . Assuming the specification is correct. Only can be proves that the mathematical abstraction of the model is correct, not its implementation . The most can be said, only in the best case \u2014if the requirements, system specification, compiler and hardware design are correct\u2014, then the program will run correctly . Few resources # Formal methods is relatively recent , so it presents some problems typical of the new disciplines: Few tools . Most of them specialized in very specific fields, having to learn and use different technologies for each purpose. ( Maude aims to solve this problem). Few documentation . Lack of user friendly GUIs . Lack of standardization .","title":"Introduction"},{"location":"formal_methods/introducction/#introduction","text":"","title":"Introduction"},{"location":"formal_methods/introducction/#glossary","text":"","title":"Glossary"},{"location":"formal_methods/introducction/#definitions","text":"Formal methods : Logical and mathematical reasoning about the software. Equivalence class : Subset of the input domain which causes the software to behave in the same way for all of them \u2014i.e. correct passwords is an equivalence class, all of them resulting in a correct login.","title":"Definitions"},{"location":"formal_methods/introducction/#acronyms","text":"RT : Real Time. I/O : Input/Output.","title":"Acronyms"},{"location":"formal_methods/introducction/#synonyms","text":"Bug (informal but short) / Software failure (formal but long). GUI : Graphical user interface.","title":"Synonyms"},{"location":"formal_methods/introducction/#formal-methods-the-good-part","text":"","title":"Formal methods - The good part"},{"location":"formal_methods/introducction/#goals","text":"Reliability Security & Safety Robustness Verification Efficiency","title":"Goals"},{"location":"formal_methods/introducction/#usage","text":"Definition of unambiguous requirements. (ease communication) Better systems understanding and testing . Lower development and maintenance cost . Model benefits : Compile model to implementation, equivalence of models, etc.","title":"Usage"},{"location":"formal_methods/introducction/#software-problems-it-solves","text":"There are some software problems that formal methods solve: When software reaches an inconsistent state (probably a bug ), rebooting is usually the easiest solution. But many systems cannot be rebooted. So it is important to ensure that the system will not reach inconsistent states. Many systems are critical and RT . An error in one of these systems implies very high risk\u2014i.e. physical damage to people, fatalities, environmental damage, legal consequences, high monetary costs, etc. So it is essential to verify that there are no software faults. Most software works with infinite data domains , and it is even difficult to find all equivalence classes (use cases). Experimental test ( I/O ) usually focuses on covering all equivalence classes with at least one test for each equivalence class . Most of the software bugs comes from unexpected input, belonging to an untested equivalence class\u2014probably because it had not been contemplated. So it is crucial to find all equivalence classes . Formal methods can find all of them. It is desirable to prove properties for the equivalence classes. But typically they are either \u201cproved\u201d inductively\u2014by testing with at least one value of the equivalence class and assuming true for the rest of the equivalence class\u2014or proved manually (non-automatically) for each desired property. So it would be useful to prove all \u2014even properties that had not been thought of (maybe undesirable)\u2014posible properties of the system automatically. Formal methods can do it.","title":"Software problems it solves"},{"location":"formal_methods/introducction/#formal-methods-the-bad-part","text":"If it is so useful, why is it not used so much?","title":"Formal methods - The bad part"},{"location":"formal_methods/introducction/#verification-limitations","text":"The requirements or specification may be incorrect . Assuming the specification is correct. Only can be proves that the mathematical abstraction of the model is correct, not its implementation . The most can be said, only in the best case \u2014if the requirements, system specification, compiler and hardware design are correct\u2014, then the program will run correctly .","title":"Verification limitations"},{"location":"formal_methods/introducction/#few-resources","text":"Formal methods is relatively recent , so it presents some problems typical of the new disciplines: Few tools . Most of them specialized in very specific fields, having to learn and use different technologies for each purpose. ( Maude aims to solve this problem). Few documentation . Lack of user friendly GUIs . Lack of standardization .","title":"Few resources"},{"location":"mobile_development/introducction/","text":"Introducction # Nowadays mobiles are not only telephones, they are the most useful and used tool. The mobile development evolution is consequently very fast and the market is very changeable. Glossary # Acronyms # App : Application. GPS : Global Positioning System. OS : Operating System. SMS : Short Message/Messaging Service. STK : SIM Application Toolkit. USSD : Unstructured Supplementary Service Data. Mobile Apps # One of the most important decisions when developing a mobile app is to decide whether it will be native or web app . Each of these options has its pros and cons. Native apps # Native apps run directly on the mobile. Pros and cons # Pros : Efficiency. Maximum software and hardware utilization : GPS , accelerometers, touchscreen, etc. More efficient apps . Allows privacy , as there is no need to send data over the network.. Cons : Expensive development. A different executable for each OS and hardware platform. Usually a different app for each OS . Need to be uploading new versions to the app store. Recommended usage # Native apps are suitable for: Apps that need to interact with the device\u2019s hardware , memory or OS . Apps running locally without network access. Apps that need privacy . Some native apps examples: camera, file manager, gallery, calculator, blog of notes, etc. Web apps # Web apps run on a server, providing service throught a browser. Pros and cons # Pros : Simple development. Only one app needs to be developed. Maintainability . Updated directly on the server, not for each mobile. Cons : Low efficiency. Unable to make proper use of the device\u2019s hardware and software . Is highly dependent on network technology. Usually slower responses. Recommended usage # Web apps are suitable for: Apps with a small budget . Service based Apps (no need of device access). Apps with centralised database access requirements. Apps whose content is constantly updated . Some web apps examples: Streaming (as YouTube ), news (as NBC News ), repositories (as GitHub ), online services (as ILovePDF ), etc. Hybrid apps # Many apps require some features from native apps and some from web apps . So why not make a hybrid app ? Hybrid apps seek to benefit from the best features of both paradigms . So they develop part of the app in a native way and another part in a web way, integrating both parts in a single app . Recommended usage # whenever native and web features are necessary. Some hybrid examples: Social network / chat / mail / cloud storage apps : Usually needs access to DB (web feature) but also access to hardware and memory\u2014i.e. camera, gallery or file manager\u2014(native feature). As Twitter , Whatsapp , Gmail or Drive , respectively. Localization / Maps apps : Usually needs acces to the map (web feature), but also so the GPS location (native feature). As Google Maps or Uber . Message-based apps # The not-so-well-known message-based apps , become important in regions with little network technology. The message-based apps are supported by messaging APIs like SMS , USSD or STK . See glossary . Mobile OS # Nowadays the main two OS are Android (open-source) an iOS , but it has not always been like this. There have been many other OS for mobiles throughout history: Windows Phone (Microsoft) Blackberry 10 (Blackberry) AliOS (Alibaba) Symbian (Nokia) Bada (Samsung) Firefox OS (Mozilla) Mer (Sailfish) Ubuntu Touch (Ubuntu) Tizen (Samsung) All of them have passed into history except for Tizen (used for werables). Topics about mobile development # Architecture and OS of mobiles. Software and technologies for mobile apps development. Mobile apps development for Android .","title":"Introducction"},{"location":"mobile_development/introducction/#introducction","text":"Nowadays mobiles are not only telephones, they are the most useful and used tool. The mobile development evolution is consequently very fast and the market is very changeable.","title":"Introducction"},{"location":"mobile_development/introducction/#glossary","text":"","title":"Glossary"},{"location":"mobile_development/introducction/#acronyms","text":"App : Application. GPS : Global Positioning System. OS : Operating System. SMS : Short Message/Messaging Service. STK : SIM Application Toolkit. USSD : Unstructured Supplementary Service Data.","title":"Acronyms"},{"location":"mobile_development/introducction/#mobile-apps","text":"One of the most important decisions when developing a mobile app is to decide whether it will be native or web app . Each of these options has its pros and cons.","title":"Mobile Apps"},{"location":"mobile_development/introducction/#native-apps","text":"Native apps run directly on the mobile.","title":"Native apps"},{"location":"mobile_development/introducction/#pros-and-cons","text":"Pros : Efficiency. Maximum software and hardware utilization : GPS , accelerometers, touchscreen, etc. More efficient apps . Allows privacy , as there is no need to send data over the network.. Cons : Expensive development. A different executable for each OS and hardware platform. Usually a different app for each OS . Need to be uploading new versions to the app store.","title":"Pros and cons"},{"location":"mobile_development/introducction/#recommended-usage","text":"Native apps are suitable for: Apps that need to interact with the device\u2019s hardware , memory or OS . Apps running locally without network access. Apps that need privacy . Some native apps examples: camera, file manager, gallery, calculator, blog of notes, etc.","title":"Recommended usage"},{"location":"mobile_development/introducction/#web-apps","text":"Web apps run on a server, providing service throught a browser.","title":"Web apps"},{"location":"mobile_development/introducction/#pros-and-cons_1","text":"Pros : Simple development. Only one app needs to be developed. Maintainability . Updated directly on the server, not for each mobile. Cons : Low efficiency. Unable to make proper use of the device\u2019s hardware and software . Is highly dependent on network technology. Usually slower responses.","title":"Pros and cons"},{"location":"mobile_development/introducction/#recommended-usage_1","text":"Web apps are suitable for: Apps with a small budget . Service based Apps (no need of device access). Apps with centralised database access requirements. Apps whose content is constantly updated . Some web apps examples: Streaming (as YouTube ), news (as NBC News ), repositories (as GitHub ), online services (as ILovePDF ), etc.","title":"Recommended usage"},{"location":"mobile_development/introducction/#hybrid-apps","text":"Many apps require some features from native apps and some from web apps . So why not make a hybrid app ? Hybrid apps seek to benefit from the best features of both paradigms . So they develop part of the app in a native way and another part in a web way, integrating both parts in a single app .","title":"Hybrid apps"},{"location":"mobile_development/introducction/#recommended-usage_2","text":"whenever native and web features are necessary. Some hybrid examples: Social network / chat / mail / cloud storage apps : Usually needs access to DB (web feature) but also access to hardware and memory\u2014i.e. camera, gallery or file manager\u2014(native feature). As Twitter , Whatsapp , Gmail or Drive , respectively. Localization / Maps apps : Usually needs acces to the map (web feature), but also so the GPS location (native feature). As Google Maps or Uber .","title":"Recommended usage"},{"location":"mobile_development/introducction/#message-based-apps","text":"The not-so-well-known message-based apps , become important in regions with little network technology. The message-based apps are supported by messaging APIs like SMS , USSD or STK . See glossary .","title":"Message-based apps"},{"location":"mobile_development/introducction/#mobile-os","text":"Nowadays the main two OS are Android (open-source) an iOS , but it has not always been like this. There have been many other OS for mobiles throughout history: Windows Phone (Microsoft) Blackberry 10 (Blackberry) AliOS (Alibaba) Symbian (Nokia) Bada (Samsung) Firefox OS (Mozilla) Mer (Sailfish) Ubuntu Touch (Ubuntu) Tizen (Samsung) All of them have passed into history except for Tizen (used for werables).","title":"Mobile OS"},{"location":"mobile_development/introducction/#topics-about-mobile-development","text":"Architecture and OS of mobiles. Software and technologies for mobile apps development. Mobile apps development for Android .","title":"Topics about mobile development"},{"location":"project_management/glossary/","text":"Glossary # Definitions # Organization # Organization : A group of people who work together in an organized way for a shared purpose. Cambridge Dicctionary Vision : Outlines what you want to become and how you want to impact society and its people. Future-focused. Quick Sprout Mision : Primary goals, purposes, and values of an organization. Present-focused. Quick Sprout Resources : Capital and workers. Portfolios, programs and projects # Project : A project is a temporary endeavor undertaken by a company or organization to achieve an project objective with an established budget. Northeastern University extended. Program : A group of projects that are similar or related to one another, and which are often managed and coordinated as a group instead of independently. Northeastern University Portfolio : A group of different programs and/or projects within the same organization, which may be related or unrelated to one another. Northeastern University Deliverables and operations # Project objective : What the organization aims to achieve with this project . See more . Deliverable : A product (physical or not-physical), service, or a result (knowledge). See more . Operations : Ongoing, routine tasks that follow a company\u2019s procedures. Indeed (source). See more . Services # Internal service : A service for organization \u2018s employees. External service : A service for organization \u2018s clients. Acronyms # NGO : Non-Governmental Organization. IT : Information Technology.","title":"Glossary"},{"location":"project_management/glossary/#glossary","text":"","title":"Glossary"},{"location":"project_management/glossary/#definitions","text":"","title":"Definitions"},{"location":"project_management/glossary/#organization","text":"Organization : A group of people who work together in an organized way for a shared purpose. Cambridge Dicctionary Vision : Outlines what you want to become and how you want to impact society and its people. Future-focused. Quick Sprout Mision : Primary goals, purposes, and values of an organization. Present-focused. Quick Sprout Resources : Capital and workers.","title":"Organization"},{"location":"project_management/glossary/#portfolios-programs-and-projects","text":"Project : A project is a temporary endeavor undertaken by a company or organization to achieve an project objective with an established budget. Northeastern University extended. Program : A group of projects that are similar or related to one another, and which are often managed and coordinated as a group instead of independently. Northeastern University Portfolio : A group of different programs and/or projects within the same organization, which may be related or unrelated to one another. Northeastern University","title":"Portfolios, programs and projects"},{"location":"project_management/glossary/#deliverables-and-operations","text":"Project objective : What the organization aims to achieve with this project . See more . Deliverable : A product (physical or not-physical), service, or a result (knowledge). See more . Operations : Ongoing, routine tasks that follow a company\u2019s procedures. Indeed (source). See more .","title":"Deliverables and operations"},{"location":"project_management/glossary/#services","text":"Internal service : A service for organization \u2018s employees. External service : A service for organization \u2018s clients.","title":"Services"},{"location":"project_management/glossary/#acronyms","text":"NGO : Non-Governmental Organization. IT : Information Technology.","title":"Acronyms"},{"location":"project_management/good_practices/","text":"Good practices # Good routine practices # Reply all emails . If you can\u2019t reply it properly at this moment, reply making it clear. Be punctual . Let them know if there is a problem. Coordination . When sending a message, think of: People who are affected by it. Who should be who are affected by the issue. Who should be informed about it. Prepare the meetings well. Manage meetings well. Be an example of management, personal organization, commitment and involvement to your team and colleagues. Convene the meetings that are really necessary . Try to enjoy what we do. Meetings organization # Meetings have three parts: Convening, execution and minutes. Convening # Convene with sufficient time in advance. Make sure that the call has arrived . Specify clearly : Date, place, time and duration. Attendees. Objectives of the meeting. Meeting Points. Documentation to be handled and who should provide it. Previous actions to be taken. Remind punctuality . Confirm attendance. Execution # Start on time and end on time. Remind: Objectives. Meeting points. Dynamics. Time established. The importance of being effective. The moderator should facilitate the achievement of the results. Avoid distractions Act if progress is not being made. Concrete actions and assign them. Review the previous minutes. Summarize the meeting. Set a date for the next meeting. Minutes # At the latest one week later. Collect: Agreements. Commitments. Actions with their assignments. Agreed dates. Ask for reviews.","title":"Good practices"},{"location":"project_management/good_practices/#good-practices","text":"","title":"Good practices"},{"location":"project_management/good_practices/#good-routine-practices","text":"Reply all emails . If you can\u2019t reply it properly at this moment, reply making it clear. Be punctual . Let them know if there is a problem. Coordination . When sending a message, think of: People who are affected by it. Who should be who are affected by the issue. Who should be informed about it. Prepare the meetings well. Manage meetings well. Be an example of management, personal organization, commitment and involvement to your team and colleagues. Convene the meetings that are really necessary . Try to enjoy what we do.","title":"Good routine practices"},{"location":"project_management/good_practices/#meetings-organization","text":"Meetings have three parts: Convening, execution and minutes.","title":"Meetings organization"},{"location":"project_management/good_practices/#convening","text":"Convene with sufficient time in advance. Make sure that the call has arrived . Specify clearly : Date, place, time and duration. Attendees. Objectives of the meeting. Meeting Points. Documentation to be handled and who should provide it. Previous actions to be taken. Remind punctuality . Confirm attendance.","title":"Convening"},{"location":"project_management/good_practices/#execution","text":"Start on time and end on time. Remind: Objectives. Meeting points. Dynamics. Time established. The importance of being effective. The moderator should facilitate the achievement of the results. Avoid distractions Act if progress is not being made. Concrete actions and assign them. Review the previous minutes. Summarize the meeting. Set a date for the next meeting.","title":"Execution"},{"location":"project_management/good_practices/#minutes","text":"At the latest one week later. Collect: Agreements. Commitments. Actions with their assignments. Agreed dates. Ask for reviews.","title":"Minutes"},{"location":"project_management/introducction/","text":"Introducction # Project management consists of managing resources in the best possible way to chieve the company\u2019s objectives efficiently. Orgatization # Organizations are guided by theirs vision and mission , so they must manage their resources efficiently to fulfil them. This gap (the \u201cmanage\u201d) between vision and mission and resources is where project management comes in. As the figure shows, an entire organizatinal strategy is planned. Then this strategy leads to the management of portfolios , programs and projects . Attitude towards change # The organizatinal strategy and project planning seems to be static\u2014planned for a whole year, and then it is nerver touched again\u2014but is not. The world is constantly changing and organizations that want to survive must do so as well. Project management methodologies # For project management it is necessary to define an appropriate methodology. There are some of them: SCRUM (software development) PMBOK KANBAN Portfolios , programs and projects # See glossary . The idea is to group the resources of related projects , so that resources are better utilized and easier to organize. As the figure shows there is a hierarchy: Portfolios > Programs > Project . Strategic considerations for initiating projects # There are many reasons for an organization to initiate projects. There are some examples: Market Demand : An automobile manufacturing company authorizes a project that will build more efficient cars. Business needs/opportunities : A training company creates a new course to increase revenue. Organizational Needs : Due to high costs, a company could combine its administrative staffing functions with the order taking processes to reduce costs. Customer requests : An electric utility authorizes a project to serve a new industrial park. Technology Advances : A company authorizing a new project to develop a faster and cheaper laptop. Legal requirements : A chemical company authorizes a project to establish guidelines for handling a new toxic material. Ecological impact : A company authorizes a project to reduce its environmental impact. Social needs : An NGO authorizes a project in a developing country to provide drinking water systems and health education to prevent cholera. Software projects # Where is the software in project management? IT department # Organizations are usually organized in departments. Software is usually in the IT department. The IT department: Offers internal and external services . Supports workflows. Is essential to the business.","title":"Introducction"},{"location":"project_management/introducction/#introducction","text":"Project management consists of managing resources in the best possible way to chieve the company\u2019s objectives efficiently.","title":"Introducction"},{"location":"project_management/introducction/#orgatization","text":"Organizations are guided by theirs vision and mission , so they must manage their resources efficiently to fulfil them. This gap (the \u201cmanage\u201d) between vision and mission and resources is where project management comes in. As the figure shows, an entire organizatinal strategy is planned. Then this strategy leads to the management of portfolios , programs and projects .","title":"Orgatization"},{"location":"project_management/introducction/#attitude-towards-change","text":"The organizatinal strategy and project planning seems to be static\u2014planned for a whole year, and then it is nerver touched again\u2014but is not. The world is constantly changing and organizations that want to survive must do so as well.","title":"Attitude towards change"},{"location":"project_management/introducction/#project-management-methodologies","text":"For project management it is necessary to define an appropriate methodology. There are some of them: SCRUM (software development) PMBOK KANBAN","title":"Project management methodologies"},{"location":"project_management/introducction/#portfolios-programs-and-projects","text":"See glossary . The idea is to group the resources of related projects , so that resources are better utilized and easier to organize. As the figure shows there is a hierarchy: Portfolios > Programs > Project .","title":"Portfolios, programs and projects"},{"location":"project_management/introducction/#strategic-considerations-for-initiating-projects","text":"There are many reasons for an organization to initiate projects. There are some examples: Market Demand : An automobile manufacturing company authorizes a project that will build more efficient cars. Business needs/opportunities : A training company creates a new course to increase revenue. Organizational Needs : Due to high costs, a company could combine its administrative staffing functions with the order taking processes to reduce costs. Customer requests : An electric utility authorizes a project to serve a new industrial park. Technology Advances : A company authorizing a new project to develop a faster and cheaper laptop. Legal requirements : A chemical company authorizes a project to establish guidelines for handling a new toxic material. Ecological impact : A company authorizes a project to reduce its environmental impact. Social needs : An NGO authorizes a project in a developing country to provide drinking water systems and health education to prevent cholera.","title":"Strategic considerations for initiating projects"},{"location":"project_management/introducction/#software-projects","text":"Where is the software in project management?","title":"Software projects"},{"location":"project_management/introducction/#it-department","text":"Organizations are usually organized in departments. Software is usually in the IT department. The IT department: Offers internal and external services . Supports workflows. Is essential to the business.","title":"IT department"},{"location":"project_management/metodology/","text":"Metodology # Project management is a complex task, and to deal with that complexity we must follow a methodology. But which methodology do we choose? Project management methodologies # The main project management metodologies, oriented to processes, and which also have certification are the following: PMBOK : The most widespread and prestigious. PRINCE 2 : Mainly in Europe. ISO 21500 : High similarity with PMBOK . CMMI : Broader scope than project management. M\u00e9trica 3 : For the planning, development and maintenance of information systems. Agile metodologies # Agile methods are those that try to be very flexible and incorporate the customer in the development. There are theirs characteristics: User collaboration, business people and developers work together. Attitude to embrace change. Response to changes on top of follow-up of plans. Flexible project plan. Frequent system deliveries (demos) Simplicity is essential. The most widespread and prestigious is Scrum . PMBOK knowledge areas # Project constraints # The projects are subject to many constraints, many of them contrary. So adding or modifying one of them implies having to modify others as well, and therefore implies a risk. Any constraints fit in one or a combination of these constraints: Scope Time Cost They are typically represented in as a triangle. The project manager tries to meet the expectations of the customer, who is looking for the broader scope , the shortest time and the lowest cost . As they say: To get all three is impossible, choose two. Registration # Project management implies take records of many things: Risks. Improvement opportunities. Tasks and actions. Problems, changes requests. Errors and improvements. Communication and meeting management. In order to efficiently manage all these tasks, project management tools must be used. There are some of them: Microsoft Project / Projectonline JIRA (Atlassian) Redmine ( open-source ) TFS (Team Foundation Server - Microsoft) Trello (Atlassian) Slack Asana GitLab ( open-source ) GitHub","title":"Metodology"},{"location":"project_management/metodology/#metodology","text":"Project management is a complex task, and to deal with that complexity we must follow a methodology. But which methodology do we choose?","title":"Metodology"},{"location":"project_management/metodology/#project-management-methodologies","text":"The main project management metodologies, oriented to processes, and which also have certification are the following: PMBOK : The most widespread and prestigious. PRINCE 2 : Mainly in Europe. ISO 21500 : High similarity with PMBOK . CMMI : Broader scope than project management. M\u00e9trica 3 : For the planning, development and maintenance of information systems.","title":"Project management methodologies"},{"location":"project_management/metodology/#agile-metodologies","text":"Agile methods are those that try to be very flexible and incorporate the customer in the development. There are theirs characteristics: User collaboration, business people and developers work together. Attitude to embrace change. Response to changes on top of follow-up of plans. Flexible project plan. Frequent system deliveries (demos) Simplicity is essential. The most widespread and prestigious is Scrum .","title":"Agile metodologies"},{"location":"project_management/metodology/#pmbok-knowledge-areas","text":"","title":"PMBOK knowledge areas"},{"location":"project_management/metodology/#project-constraints","text":"The projects are subject to many constraints, many of them contrary. So adding or modifying one of them implies having to modify others as well, and therefore implies a risk. Any constraints fit in one or a combination of these constraints: Scope Time Cost They are typically represented in as a triangle. The project manager tries to meet the expectations of the customer, who is looking for the broader scope , the shortest time and the lowest cost . As they say: To get all three is impossible, choose two.","title":"Project constraints"},{"location":"project_management/metodology/#registration","text":"Project management implies take records of many things: Risks. Improvement opportunities. Tasks and actions. Problems, changes requests. Errors and improvements. Communication and meeting management. In order to efficiently manage all these tasks, project management tools must be used. There are some of them: Microsoft Project / Projectonline JIRA (Atlassian) Redmine ( open-source ) TFS (Team Foundation Server - Microsoft) Trello (Atlassian) Slack Asana GitLab ( open-source ) GitHub","title":"Registration"},{"location":"project_management/projects_vs_operations/","text":"Projects vs operations # Questions about projects and operations: What is a project ? What is an operation ? What is the difference between them? How to manage them? Project # A project is a temporary endeavor undertaken by a company or organization to achieve an project objective with an established budget . Temporary # A project must have a start and end date, BOTH! . The project ends when: The objective has been achieved . when it is clear that the objectives will not or cannot be achieved . when the need for the project no longer exists . Objective # The project objective is what the organization aims to achieve with this project . Deliverables are planned to achieve these project objectives . Note that the project objective is not to produce deliverables , but rather that deliverables are a means to achieve project objectives . Deliverables are clasified as products, sercives or results: Product : An element, physical or not-physical. Service : Any type of service. Result : knowledge. There are some examples: Software development : An application. (Product) Its user manual. (Product) A training session conducted on the application. (Service) Software maintenance : A service for handling requests for changes and error detection. (Service) Monthly reports. (Result) Server administration : Logging of operations performed, backups, installations, queries, etc. (Results) Recovery plans. (Result) Increased memory or computation capacity. (Product) Give a course : Course given. (Service) Developed material. (Result) Design a sales campaign : Campaign documentation. (Result) Promotional brochures. (Product) Write an article : The article with the results. (Product) Documentation on the tests performed. (Result) Misconceptions # Organizations call many different things a project : Smaller, unbounded activities. Activities that are more global, not bounded, and permanent in time. Companies as projects. Programs, actions and initiatives as projects. A project must be clear and temporally bounded. Metodology # It is important to establish a standard methodology , which can be slightly adjusted for each project depending on its characteristics and size . Operations # Operations are ongoing routine tasks that follow a company\u2019s procedures. Characteristics : Don\u2019t produce new deliverables . Are less risky . Are permanent . Provides the same result or service to maintain the day-to-day business. Differences # Organizations execute their work in order to achieve their objectives. This work can be categorized: As work to be performed in a project . As part of the operations defined in the organization . So projects and operations are usually confused. Similarities : Planned, executed, and monitored. Executed by people. Limited resources. Differences : Characteristic Projects Operations Purpose Achieve the defined objectives and finish Sustaini the organization Temporality Temporary. Defined start and end Performed continuously People Temporary and dynamic teams to meet the needs of the project Functional teams aligned with the organization Authority over the manager The project manager has the ultimate authority, if there is someone above him, he is connected to him There is an hierarchy established between the manager and a higher authority","title":"Projects vs operations"},{"location":"project_management/projects_vs_operations/#projects-vs-operations","text":"Questions about projects and operations: What is a project ? What is an operation ? What is the difference between them? How to manage them?","title":"Projects vs operations"},{"location":"project_management/projects_vs_operations/#project","text":"A project is a temporary endeavor undertaken by a company or organization to achieve an project objective with an established budget .","title":"Project"},{"location":"project_management/projects_vs_operations/#temporary","text":"A project must have a start and end date, BOTH! . The project ends when: The objective has been achieved . when it is clear that the objectives will not or cannot be achieved . when the need for the project no longer exists .","title":"Temporary"},{"location":"project_management/projects_vs_operations/#objective","text":"The project objective is what the organization aims to achieve with this project . Deliverables are planned to achieve these project objectives . Note that the project objective is not to produce deliverables , but rather that deliverables are a means to achieve project objectives . Deliverables are clasified as products, sercives or results: Product : An element, physical or not-physical. Service : Any type of service. Result : knowledge. There are some examples: Software development : An application. (Product) Its user manual. (Product) A training session conducted on the application. (Service) Software maintenance : A service for handling requests for changes and error detection. (Service) Monthly reports. (Result) Server administration : Logging of operations performed, backups, installations, queries, etc. (Results) Recovery plans. (Result) Increased memory or computation capacity. (Product) Give a course : Course given. (Service) Developed material. (Result) Design a sales campaign : Campaign documentation. (Result) Promotional brochures. (Product) Write an article : The article with the results. (Product) Documentation on the tests performed. (Result)","title":"Objective"},{"location":"project_management/projects_vs_operations/#misconceptions","text":"Organizations call many different things a project : Smaller, unbounded activities. Activities that are more global, not bounded, and permanent in time. Companies as projects. Programs, actions and initiatives as projects. A project must be clear and temporally bounded.","title":"Misconceptions"},{"location":"project_management/projects_vs_operations/#metodology","text":"It is important to establish a standard methodology , which can be slightly adjusted for each project depending on its characteristics and size .","title":"Metodology"},{"location":"project_management/projects_vs_operations/#operations","text":"Operations are ongoing routine tasks that follow a company\u2019s procedures. Characteristics : Don\u2019t produce new deliverables . Are less risky . Are permanent . Provides the same result or service to maintain the day-to-day business.","title":"Operations"},{"location":"project_management/projects_vs_operations/#differences","text":"Organizations execute their work in order to achieve their objectives. This work can be categorized: As work to be performed in a project . As part of the operations defined in the organization . So projects and operations are usually confused. Similarities : Planned, executed, and monitored. Executed by people. Limited resources. Differences : Characteristic Projects Operations Purpose Achieve the defined objectives and finish Sustaini the organization Temporality Temporary. Defined start and end Performed continuously People Temporary and dynamic teams to meet the needs of the project Functional teams aligned with the organization Authority over the manager The project manager has the ultimate authority, if there is someone above him, he is connected to him There is an hierarchy established between the manager and a higher authority","title":"Differences"},{"location":"web_engineering/glossary/","text":"Glossary # Definitions # Ad-hoc : Latin phrase meaning literally \u2018to this\u2019. Typically signifies a solution for a specific purpose, problem, or task rather than a generalized solution adaptable to collateral instances. AJAX : Asynchronous JavaScript and XML. Is a set of web development techniques that uses various web technologies on the client-side to create asynchronous web applications. Internet : Computers net supported by TCP/IP protocol. Model : A representation or specification of a system, from a certain point of view and with a specific objective. Performance : Ability to provide a response time. PC Era : Before the Web . Scalability : How increased data usage and data growth affects performance . Software architecture : Fundamental structures of a software system and the discipline of creating such structures and systems. Each structure comprises software elements, relations among them, and properties of both elements and relations. Acronyms # AI : Artificial Intelligence. CPU : Central Processing Unit. (computer processor) CSS : Cascading Style Sheet. DB : Data Base. DL : Deep Learning. DOM : Document Object Model. HTML : HyperText Markup Language. HTTP : Hypertext Transfer Protocol. (Application layer) IFML : Interaction Flow Modeling Language. (standard) IoT : Internet of Things. IP : Internet Protocol. (Internet layer) MDD : Model Driven Development. (metodology) OWL : Web Ontology Language. PC : Personal Computer. PIM : Platform-Independent Model. PSM : Platform-Specific Model. RAM : Random Access Memory. (computer volatile memory) SPARQL : Semantic Protocol And RDF Query Language. SSD : Solid State Drive. (fast non-volatile memory) TCP : Transmission Control Protocol. (Transport layer) UML : Unified Modeling Language. (standard) Web : World Wide Web . W3C : World Wide Web Consortium . XHTML : Extensible HyperText Markup Language. XML : Extensible Markup Language. XSLT Extensible Stylesheet Language.","title":"Glossary"},{"location":"web_engineering/glossary/#glossary","text":"","title":"Glossary"},{"location":"web_engineering/glossary/#definitions","text":"Ad-hoc : Latin phrase meaning literally \u2018to this\u2019. Typically signifies a solution for a specific purpose, problem, or task rather than a generalized solution adaptable to collateral instances. AJAX : Asynchronous JavaScript and XML. Is a set of web development techniques that uses various web technologies on the client-side to create asynchronous web applications. Internet : Computers net supported by TCP/IP protocol. Model : A representation or specification of a system, from a certain point of view and with a specific objective. Performance : Ability to provide a response time. PC Era : Before the Web . Scalability : How increased data usage and data growth affects performance . Software architecture : Fundamental structures of a software system and the discipline of creating such structures and systems. Each structure comprises software elements, relations among them, and properties of both elements and relations.","title":"Definitions"},{"location":"web_engineering/glossary/#acronyms","text":"AI : Artificial Intelligence. CPU : Central Processing Unit. (computer processor) CSS : Cascading Style Sheet. DB : Data Base. DL : Deep Learning. DOM : Document Object Model. HTML : HyperText Markup Language. HTTP : Hypertext Transfer Protocol. (Application layer) IFML : Interaction Flow Modeling Language. (standard) IoT : Internet of Things. IP : Internet Protocol. (Internet layer) MDD : Model Driven Development. (metodology) OWL : Web Ontology Language. PC : Personal Computer. PIM : Platform-Independent Model. PSM : Platform-Specific Model. RAM : Random Access Memory. (computer volatile memory) SPARQL : Semantic Protocol And RDF Query Language. SSD : Solid State Drive. (fast non-volatile memory) TCP : Transmission Control Protocol. (Transport layer) UML : Unified Modeling Language. (standard) Web : World Wide Web . W3C : World Wide Web Consortium . XHTML : Extensible HyperText Markup Language. XML : Extensible Markup Language. XSLT Extensible Stylesheet Language.","title":"Acronyms"},{"location":"web_engineering/introducction/","text":"Introducction # The Web # The Web is a service deployed over Internet . The main file in the Web is the HTML . The Web is supported by HTTP over TCP/IP . The Web is standardised by W3C since 1994. The Web has evolved from PC Era to Web 4.0. Web 1.0 # Started in 1991. People connecting to servers. Static webs. Few content producers / Many readers. Preduced interaction. Tecnologies: # HTTP as application protocol. HTML as information document. Web 2.0 # Started in 2004. People connecting to people. Blogs and social networks began. Sharing contents. Communities. Tecnologies # XHTML and CSS to data presentation. DOM for interactivity. XML and XSLT for information sharing. JavaScript and Ajax. Web 3.0 # Started in 2010. Semantic web. Software capable of process, reason and logic deduction. Well-labeled information. Tecnologies # OWL-S for ontology. SPARQL for DB queries. Web 4.0 # Started in 2020. Distributed resources. Configurable services. Massively scalable services. Cloud computing, portability, IoT, AI and DL. New interfaces (i.e. voice interfaces). Web applications # This has been the evolution of web applications: Document centric : Static HTML . Interactive : Dynamic HTML generation. Transactional : DB queries and transactions. Workflow-based : To manage workflows across departments, organisations and companies, etc. Collaborative : Shared projects and information. Portal-oriented (Website) : Offers a broad array of resources and services\u2014usually related. Ubiquitous : Services to be accessed anywhere and anytime. Knowledge based : Personalized based on data. Cloud computing : Computing and storage as a service.","title":"Introducction"},{"location":"web_engineering/introducction/#introducction","text":"","title":"Introducction"},{"location":"web_engineering/introducction/#the-web","text":"The Web is a service deployed over Internet . The main file in the Web is the HTML . The Web is supported by HTTP over TCP/IP . The Web is standardised by W3C since 1994. The Web has evolved from PC Era to Web 4.0.","title":"The Web"},{"location":"web_engineering/introducction/#web-10","text":"Started in 1991. People connecting to servers. Static webs. Few content producers / Many readers. Preduced interaction.","title":"Web 1.0"},{"location":"web_engineering/introducction/#tecnologies","text":"HTTP as application protocol. HTML as information document.","title":"Tecnologies:"},{"location":"web_engineering/introducction/#web-20","text":"Started in 2004. People connecting to people. Blogs and social networks began. Sharing contents. Communities.","title":"Web 2.0"},{"location":"web_engineering/introducction/#tecnologies_1","text":"XHTML and CSS to data presentation. DOM for interactivity. XML and XSLT for information sharing. JavaScript and Ajax.","title":"Tecnologies"},{"location":"web_engineering/introducction/#web-30","text":"Started in 2010. Semantic web. Software capable of process, reason and logic deduction. Well-labeled information.","title":"Web 3.0"},{"location":"web_engineering/introducction/#tecnologies_2","text":"OWL-S for ontology. SPARQL for DB queries.","title":"Tecnologies"},{"location":"web_engineering/introducction/#web-40","text":"Started in 2020. Distributed resources. Configurable services. Massively scalable services. Cloud computing, portability, IoT, AI and DL. New interfaces (i.e. voice interfaces).","title":"Web 4.0"},{"location":"web_engineering/introducction/#web-applications","text":"This has been the evolution of web applications: Document centric : Static HTML . Interactive : Dynamic HTML generation. Transactional : DB queries and transactions. Workflow-based : To manage workflows across departments, organisations and companies, etc. Collaborative : Shared projects and information. Portal-oriented (Website) : Offers a broad array of resources and services\u2014usually related. Ubiquitous : Services to be accessed anywhere and anytime. Knowledge based : Personalized based on data. Cloud computing : Computing and storage as a service.","title":"Web applications"},{"location":"web_engineering/software_architecture/","text":"Software architecture # What is software architecture? # Software architecture refers to the fundamental structures of a software system and the discipline of creating such structures and systems. Each structure comprises software elements, relations among them, and properties of both elements and relations. Software architecture is usually represented as with a model . Architecture model # Architecture modeling have the following characteristics: It represents a set of structures necessary to reason about such a system. It is an abstraction that dispenses with details. Architectural points of view # Architecture can be defined from physical or logical point of view. Physical architecture # Physical elements for software execution: Hardware Third party software Other elements external to the application Logical architecture # Software components . Group the different functionalities. It deals with the public part of the elements of the system. Describes the software components , the relationships between them and their properties Ignores the internal implementation of the components Mixed architecture # It is also usual to represents both together: physical as tiers , logical as layers . Architecture layers # Each architecture layer, has a specific purpose . Presentation layer # Displays the user interface Facilitates user interaction with the system Server-side contains a component that generates and serves the HTML . Client-side contains a browser that displays HTML and executes scripts. Computational load: Traditionally the presentation logic was server-side . Technologies such as AJAX allow logic to be executed on the client-side . Business layer # Includes business logic Allows reuse of business logic functions Enables improved maintenance and testing Data layer # Abstracts the logic needed to access the DB . Service layer # Encapsulates access to external services residing on a remote machine The system itself can be offered as web services . Architecture scalability # Scalability is how increased data usage and data growth affects performance . It is important: The correct dimensioning of the application The adaptability of the system to increased demand. There are two ways of scaling a system: vertical or horizontal scaling. Vertical scaling # Adding more power to the machine hosting the system Faster CPU More RAM SSD disks Horizontal scaling # Creating system clones and load balancing . Balancing can be done by hardware or software . Hardware balancing # Different requests from the same user can be handled by different clones . Based on routing, tunneling or IP translation. Software balancing # All requests from a user are served by the same clone . Done by inspecting HTTP packets to maintain the user session in the same machine. Architecture patterns # They describe a general solution to a design problem that is frequently encountered . Are general organization schemes of a system Specify a series of subsystems or components and their responsibilities Define rules for organizing the interactions between them More about architecture patterns here . Architectural modeling in UML # Components diagram # A component diagram is composed of software components . A software component is a composition unit with all its interfaces and context dependencies explicitly defined . Components properties # Ports : Connection points between your internal structure and your environment. Interfaces : Services offered and required to compose it with others. Realizations : The classes that implement it. Artifacts : The physical files that enable its deployment. Source files Scripts Executables Deployment diagram # Shows the communication topology of a distributed system. They represent the nodes or devices of the system The connections between the nodes The assignment of artifacts and software components to each node It is the highest level diagram in UML . The use of visual stereotypes allows a particularized representation of the deployment diagram.","title":"Software architecture"},{"location":"web_engineering/software_architecture/#software-architecture","text":"","title":"Software architecture"},{"location":"web_engineering/software_architecture/#what-is-software-architecture","text":"Software architecture refers to the fundamental structures of a software system and the discipline of creating such structures and systems. Each structure comprises software elements, relations among them, and properties of both elements and relations. Software architecture is usually represented as with a model .","title":"What is software architecture?"},{"location":"web_engineering/software_architecture/#architecture-model","text":"Architecture modeling have the following characteristics: It represents a set of structures necessary to reason about such a system. It is an abstraction that dispenses with details.","title":"Architecture model"},{"location":"web_engineering/software_architecture/#architectural-points-of-view","text":"Architecture can be defined from physical or logical point of view.","title":"Architectural points of view"},{"location":"web_engineering/software_architecture/#physical-architecture","text":"Physical elements for software execution: Hardware Third party software Other elements external to the application","title":"Physical architecture"},{"location":"web_engineering/software_architecture/#logical-architecture","text":"Software components . Group the different functionalities. It deals with the public part of the elements of the system. Describes the software components , the relationships between them and their properties Ignores the internal implementation of the components","title":"Logical architecture"},{"location":"web_engineering/software_architecture/#mixed-architecture","text":"It is also usual to represents both together: physical as tiers , logical as layers .","title":"Mixed architecture"},{"location":"web_engineering/software_architecture/#architecture-layers","text":"Each architecture layer, has a specific purpose .","title":"Architecture layers"},{"location":"web_engineering/software_architecture/#presentation-layer","text":"Displays the user interface Facilitates user interaction with the system Server-side contains a component that generates and serves the HTML . Client-side contains a browser that displays HTML and executes scripts. Computational load: Traditionally the presentation logic was server-side . Technologies such as AJAX allow logic to be executed on the client-side .","title":"Presentation layer"},{"location":"web_engineering/software_architecture/#business-layer","text":"Includes business logic Allows reuse of business logic functions Enables improved maintenance and testing","title":"Business layer"},{"location":"web_engineering/software_architecture/#data-layer","text":"Abstracts the logic needed to access the DB .","title":"Data layer"},{"location":"web_engineering/software_architecture/#service-layer","text":"Encapsulates access to external services residing on a remote machine The system itself can be offered as web services .","title":"Service layer"},{"location":"web_engineering/software_architecture/#architecture-scalability","text":"Scalability is how increased data usage and data growth affects performance . It is important: The correct dimensioning of the application The adaptability of the system to increased demand. There are two ways of scaling a system: vertical or horizontal scaling.","title":"Architecture scalability"},{"location":"web_engineering/software_architecture/#vertical-scaling","text":"Adding more power to the machine hosting the system Faster CPU More RAM SSD disks","title":"Vertical scaling"},{"location":"web_engineering/software_architecture/#horizontal-scaling","text":"Creating system clones and load balancing . Balancing can be done by hardware or software .","title":"Horizontal scaling"},{"location":"web_engineering/software_architecture/#hardware-balancing","text":"Different requests from the same user can be handled by different clones . Based on routing, tunneling or IP translation.","title":"Hardware balancing"},{"location":"web_engineering/software_architecture/#software-balancing","text":"All requests from a user are served by the same clone . Done by inspecting HTTP packets to maintain the user session in the same machine.","title":"Software balancing"},{"location":"web_engineering/software_architecture/#architecture-patterns","text":"They describe a general solution to a design problem that is frequently encountered . Are general organization schemes of a system Specify a series of subsystems or components and their responsibilities Define rules for organizing the interactions between them More about architecture patterns here .","title":"Architecture patterns"},{"location":"web_engineering/software_architecture/#architectural-modeling-in-uml","text":"","title":"Architectural modeling in UML"},{"location":"web_engineering/software_architecture/#components-diagram","text":"A component diagram is composed of software components . A software component is a composition unit with all its interfaces and context dependencies explicitly defined .","title":"Components diagram"},{"location":"web_engineering/software_architecture/#components-properties","text":"Ports : Connection points between your internal structure and your environment. Interfaces : Services offered and required to compose it with others. Realizations : The classes that implement it. Artifacts : The physical files that enable its deployment. Source files Scripts Executables","title":"Components properties"},{"location":"web_engineering/software_architecture/#deployment-diagram","text":"Shows the communication topology of a distributed system. They represent the nodes or devices of the system The connections between the nodes The assignment of artifacts and software components to each node It is the highest level diagram in UML . The use of visual stereotypes allows a particularized representation of the deployment diagram.","title":"Deployment diagram"},{"location":"web_engineering/web_modeling/","text":"Web modeling # What is a web model? # See model definition in glossary . A web model allows you to specify web sites from web development components; i.e. IFML . Web characteristics # Web models take into account: Static and dynamic aspects of content hypertext and navigation Presentation levels Web dimensions # Content : Information handled by the application. Presentation : Visual layout of the elements and their relationships. Prototyping : Validation with users and testing. Why use web models? # Models are super-powerful development tools. Eases the development # Reduces complexity Documents design decisions Is a means of communication Web models usages # The use of models is increasing in software development. Web model as a draft : Communicates ideas Highlights what is most important People-oriented Informal and incomplete Web model as a guide : Documents design decisions Solution -oriented Rigorous and consistent Web model as a program : Model driven development ( MDD ) Isolates the specification of the system from its functionality and the technology used in implementation Distinguishes between platform-independent model ( PIM ) and platform-specific model ( PSM ) The model is converted into code Automatic generation of applications Transformations are the key element MDD for web # MDD is increasingly used because of its great potential. Advantages # Better than traditional ad-hoc development. It is a solid starting point for implementation Avoids problems such as: Insufficient fulfillment of requirements Wrong specifications Lack of system documentation Tools # Tools is what developers need. There are some web model tools: IFMLEdit : Based on IFML standard. PIM Simple Online runable Prototype Generate implementation WebRation Web Platform (requires Java 7) OMG Specification Courses Figma : For UI design PSM Online runable Prototype","title":"Web modeling"},{"location":"web_engineering/web_modeling/#web-modeling","text":"","title":"Web modeling"},{"location":"web_engineering/web_modeling/#what-is-a-web-model","text":"See model definition in glossary . A web model allows you to specify web sites from web development components; i.e. IFML .","title":"What is a web model?"},{"location":"web_engineering/web_modeling/#web-characteristics","text":"Web models take into account: Static and dynamic aspects of content hypertext and navigation Presentation levels","title":"Web characteristics"},{"location":"web_engineering/web_modeling/#web-dimensions","text":"Content : Information handled by the application. Presentation : Visual layout of the elements and their relationships. Prototyping : Validation with users and testing.","title":"Web dimensions"},{"location":"web_engineering/web_modeling/#why-use-web-models","text":"Models are super-powerful development tools.","title":"Why use web models?"},{"location":"web_engineering/web_modeling/#eases-the-development","text":"Reduces complexity Documents design decisions Is a means of communication","title":"Eases the development"},{"location":"web_engineering/web_modeling/#web-models-usages","text":"The use of models is increasing in software development. Web model as a draft : Communicates ideas Highlights what is most important People-oriented Informal and incomplete Web model as a guide : Documents design decisions Solution -oriented Rigorous and consistent Web model as a program : Model driven development ( MDD ) Isolates the specification of the system from its functionality and the technology used in implementation Distinguishes between platform-independent model ( PIM ) and platform-specific model ( PSM ) The model is converted into code Automatic generation of applications Transformations are the key element","title":"Web models usages"},{"location":"web_engineering/web_modeling/#mdd-for-web","text":"MDD is increasingly used because of its great potential.","title":"MDD for web"},{"location":"web_engineering/web_modeling/#advantages","text":"Better than traditional ad-hoc development. It is a solid starting point for implementation Avoids problems such as: Insufficient fulfillment of requirements Wrong specifications Lack of system documentation","title":"Advantages"},{"location":"web_engineering/web_modeling/#tools","text":"Tools is what developers need. There are some web model tools: IFMLEdit : Based on IFML standard. PIM Simple Online runable Prototype Generate implementation WebRation Web Platform (requires Java 7) OMG Specification Courses Figma : For UI design PSM Online runable Prototype","title":"Tools"}]}