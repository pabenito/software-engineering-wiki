{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home # Welcome to Software Notes. What is this about? # About my notes of Software Engineering from the University of M\u00e1laga . Why public? # I would like these notes to be useful to others . Why in English? # To improve my English and to make this website more accessible to everyone . What topics will be covered? # Web engineering Formal methods Mobile development Embedded systems Project management","title":"Home"},{"location":"#home","text":"Welcome to Software Notes.","title":"Home"},{"location":"#what-is-this-about","text":"About my notes of Software Engineering from the University of M\u00e1laga .","title":"What is this about?"},{"location":"#why-public","text":"I would like these notes to be useful to others .","title":"Why public?"},{"location":"#why-in-english","text":"To improve my English and to make this website more accessible to everyone .","title":"Why in English?"},{"location":"#what-topics-will-be-covered","text":"Web engineering Formal methods Mobile development Embedded systems Project management","title":"What topics will be covered?"},{"location":"embedded_systems/introducction/","text":"Introducction # Glossary # Acronyms # ASIC Application-Specific Integrated Circuit. FPGA : Field-Programmable Gate Array. GPS : Global Positioning System. IDE : Integrated Development Dnvironment. OS : Operating System. POSIX : Portable Operating System Interface. RT : Real Time. UI : User Interface. What are embedded systems? # A system with a programmable computer , but not general purpose. Where they are? # It is estimated that there are an average of 40 embedded systems per house. Automotive : Engine control, braking system, etc. Home electronics : Washing machine, refrigerator, microwave, toaster, etc. Consumer electronics : Mobile phones, mp3, ebooks, tv, cameras, gps, etc. Industrial control : Manufacturing control systems, sensors, etc. Medical : Dialysis machines, cardiac monitors, etc. Office : Fax, photocopier, printers, etc. Many systems are composed of several embedded systems, i.e. mobile phones. Architecture # Layer Components Application services, UI Middleware frameworks, protocols Platform Controlers, OS Hardware Microcontrolers, peripherals Characteristics # Unique function : A single function performed repeatedly. Reliable : Minimun error probability, maintainability, disponibility, secure connections. Limited resources : Manufacturing cost, size (physical and memory), energy consumption, eficiency. RT : Reponse time limited. Reactive : Input by sensors, output by actuators. Complex algorithms : Physical environment with which they interact interact with is complex. UI : Dedicated interfaces, i.e. pedals, steering wheels, buttons, etc. Multi rate : Some tasks must be performed in RT , others do not. No all embedded systems have all the characteristics. Clasification # Usually classified as small, medium and sophisticated. characteristic \\ classification Small Medium Sophisticated Processor 8 and 16 bits 16, 32 and 64 bits FPGA , ASIC Hardware complexity Low complexity peripherals, interfaces, etc. Designers Software complexity No complex operations Medium size Software Designers must be experts Tools disponibility Programmed in a simple environment Debugger, compilers and / or IDE Complete environment needed Examples Calculator Washing machine, microwave Robots, braking and landing Topics about embedded systems # Architecture and OS of embedded systems. Software: POSIX , RT and planning. Firmware for Arduino .","title":"Introducction"},{"location":"embedded_systems/introducction/#introducction","text":"","title":"Introducction"},{"location":"embedded_systems/introducction/#glossary","text":"","title":"Glossary"},{"location":"embedded_systems/introducction/#acronyms","text":"ASIC Application-Specific Integrated Circuit. FPGA : Field-Programmable Gate Array. GPS : Global Positioning System. IDE : Integrated Development Dnvironment. OS : Operating System. POSIX : Portable Operating System Interface. RT : Real Time. UI : User Interface.","title":"Acronyms"},{"location":"embedded_systems/introducction/#what-are-embedded-systems","text":"A system with a programmable computer , but not general purpose.","title":"What are embedded systems?"},{"location":"embedded_systems/introducction/#where-they-are","text":"It is estimated that there are an average of 40 embedded systems per house. Automotive : Engine control, braking system, etc. Home electronics : Washing machine, refrigerator, microwave, toaster, etc. Consumer electronics : Mobile phones, mp3, ebooks, tv, cameras, gps, etc. Industrial control : Manufacturing control systems, sensors, etc. Medical : Dialysis machines, cardiac monitors, etc. Office : Fax, photocopier, printers, etc. Many systems are composed of several embedded systems, i.e. mobile phones.","title":"Where they are?"},{"location":"embedded_systems/introducction/#architecture","text":"Layer Components Application services, UI Middleware frameworks, protocols Platform Controlers, OS Hardware Microcontrolers, peripherals","title":"Architecture"},{"location":"embedded_systems/introducction/#characteristics","text":"Unique function : A single function performed repeatedly. Reliable : Minimun error probability, maintainability, disponibility, secure connections. Limited resources : Manufacturing cost, size (physical and memory), energy consumption, eficiency. RT : Reponse time limited. Reactive : Input by sensors, output by actuators. Complex algorithms : Physical environment with which they interact interact with is complex. UI : Dedicated interfaces, i.e. pedals, steering wheels, buttons, etc. Multi rate : Some tasks must be performed in RT , others do not. No all embedded systems have all the characteristics.","title":"Characteristics"},{"location":"embedded_systems/introducction/#clasification","text":"Usually classified as small, medium and sophisticated. characteristic \\ classification Small Medium Sophisticated Processor 8 and 16 bits 16, 32 and 64 bits FPGA , ASIC Hardware complexity Low complexity peripherals, interfaces, etc. Designers Software complexity No complex operations Medium size Software Designers must be experts Tools disponibility Programmed in a simple environment Debugger, compilers and / or IDE Complete environment needed Examples Calculator Washing machine, microwave Robots, braking and landing","title":"Clasification"},{"location":"embedded_systems/introducction/#topics-about-embedded-systems","text":"Architecture and OS of embedded systems. Software: POSIX , RT and planning. Firmware for Arduino .","title":"Topics about embedded systems"},{"location":"formal_methods/introducction/","text":"Introduction # Glossary # Definitions # Formal methods : Logical and mathematical reasoning about the software. Equivalence class : Subset of the input domain which causes the software to behave in the same way for all of them \u2014i.e. correct passwords is an equivalence class, all of them resulting in a correct login. Acronyms # RT : Real Time. I/O : Input/Output. Synonyms # Bug (informal but short) / Software failure (formal but long). GUI : Graphical user interface. Formal methods - The good part # Goals # Reliability Security & Safety Robustness Verification Efficiency Usage # Definition of unambiguous requirements. (ease communication) Better systems understanding and testing . Lower development and maintenance cost . Model benefits : Compile model to implementation, equivalence of models, etc. Software problems it solves # There are some software problems that formal methods solve: When software reaches an inconsistent state (probably a bug ), rebooting is usually the easiest solution. But many systems cannot be rebooted. So it is important to ensure that the system will not reach inconsistent states. Many systems are critical and RT . An error in one of these systems implies very high risk\u2014i.e. physical damage to people, fatalities, environmental damage, legal consequences, high monetary costs, etc. So it is essential to verify that there are no software faults. Most software works with infinite data domains , and it is even difficult to find all equivalence classes (use cases). Experimental test ( I/O ) usually focuses on covering all equivalence classes with at least one test for each equivalence class . Most of the software bugs comes from unexpected input, belonging to an untested equivalence class\u2014probably because it had not been contemplated. So it is crucial to find all equivalence classes . Formal methods can find all of them. It is desirable to prove properties for the equivalence classes. But typically they are either \u201cproved\u201d inductively\u2014by testing with at least one value of the equivalence class and assuming true for the rest of the equivalence class\u2014or proved manually (non-automatically) for each desired property. So it would be useful to prove all \u2014even properties that had not been thought of (maybe undesirable)\u2014posible properties of the system automatically. Formal methods can do it. Formal methods - The bad part # If it is so useful, why is it not used so much? Verification limitations # The requirements or specification may be incorrect . Assuming the specification is correct. Only can be proves that the mathematical abstraction of the model is correct, not its implementation . The most can be said, only in the best case \u2014if the requirements, system specification, compiler and hardware design are correct\u2014, then the program will run correctly . Few resources # Formal methods is relatively recent , so it presents some problems typical of the new disciplines: Few tools . Most of them specialized in very specific fields, having to learn and use different technologies for each purpose. ( Maude aims to solve this problem). Few documentation . Lack of user friendly GUIs . Lack of standardization .","title":"Introduction"},{"location":"formal_methods/introducction/#introduction","text":"","title":"Introduction"},{"location":"formal_methods/introducction/#glossary","text":"","title":"Glossary"},{"location":"formal_methods/introducction/#definitions","text":"Formal methods : Logical and mathematical reasoning about the software. Equivalence class : Subset of the input domain which causes the software to behave in the same way for all of them \u2014i.e. correct passwords is an equivalence class, all of them resulting in a correct login.","title":"Definitions"},{"location":"formal_methods/introducction/#acronyms","text":"RT : Real Time. I/O : Input/Output.","title":"Acronyms"},{"location":"formal_methods/introducction/#synonyms","text":"Bug (informal but short) / Software failure (formal but long). GUI : Graphical user interface.","title":"Synonyms"},{"location":"formal_methods/introducction/#formal-methods-the-good-part","text":"","title":"Formal methods - The good part"},{"location":"formal_methods/introducction/#goals","text":"Reliability Security & Safety Robustness Verification Efficiency","title":"Goals"},{"location":"formal_methods/introducction/#usage","text":"Definition of unambiguous requirements. (ease communication) Better systems understanding and testing . Lower development and maintenance cost . Model benefits : Compile model to implementation, equivalence of models, etc.","title":"Usage"},{"location":"formal_methods/introducction/#software-problems-it-solves","text":"There are some software problems that formal methods solve: When software reaches an inconsistent state (probably a bug ), rebooting is usually the easiest solution. But many systems cannot be rebooted. So it is important to ensure that the system will not reach inconsistent states. Many systems are critical and RT . An error in one of these systems implies very high risk\u2014i.e. physical damage to people, fatalities, environmental damage, legal consequences, high monetary costs, etc. So it is essential to verify that there are no software faults. Most software works with infinite data domains , and it is even difficult to find all equivalence classes (use cases). Experimental test ( I/O ) usually focuses on covering all equivalence classes with at least one test for each equivalence class . Most of the software bugs comes from unexpected input, belonging to an untested equivalence class\u2014probably because it had not been contemplated. So it is crucial to find all equivalence classes . Formal methods can find all of them. It is desirable to prove properties for the equivalence classes. But typically they are either \u201cproved\u201d inductively\u2014by testing with at least one value of the equivalence class and assuming true for the rest of the equivalence class\u2014or proved manually (non-automatically) for each desired property. So it would be useful to prove all \u2014even properties that had not been thought of (maybe undesirable)\u2014posible properties of the system automatically. Formal methods can do it.","title":"Software problems it solves"},{"location":"formal_methods/introducction/#formal-methods-the-bad-part","text":"If it is so useful, why is it not used so much?","title":"Formal methods - The bad part"},{"location":"formal_methods/introducction/#verification-limitations","text":"The requirements or specification may be incorrect . Assuming the specification is correct. Only can be proves that the mathematical abstraction of the model is correct, not its implementation . The most can be said, only in the best case \u2014if the requirements, system specification, compiler and hardware design are correct\u2014, then the program will run correctly .","title":"Verification limitations"},{"location":"formal_methods/introducction/#few-resources","text":"Formal methods is relatively recent , so it presents some problems typical of the new disciplines: Few tools . Most of them specialized in very specific fields, having to learn and use different technologies for each purpose. ( Maude aims to solve this problem). Few documentation . Lack of user friendly GUIs . Lack of standardization .","title":"Few resources"},{"location":"mobile_development/introducction/","text":"Introducction # Nowadays mobiles are not only telephones, they are the most useful and used tool. The mobile development evolution is consequently very fast and the market is very changeable. Glossary # Acronyms # App : Application. GPS : Global Positioning System. OS : Operating System. SMS : Short Message/Messaging Service. STK : SIM Application Toolkit. USSD : Unstructured Supplementary Service Data. Mobile Apps # One of the most important decisions when developing a mobile app is to decide whether it will be native or web app . Each of these options has its pros and cons. Native apps # Native apps run directly on the mobile. Pros and cons # Pros : Efficiency. Maximum software and hardware utilization : GPS , accelerometers, touchscreen, etc. More efficient apps . Allows privacy , as there is no need to send data over the network.. Cons : Expensive development. A different executable for each OS and hardware platform. Usually a different app for each OS . Need to be uploading new versions to the app store. Recommended usage # Native apps are suitable for: Apps that need to interact with the device\u2019s hardware , memory or OS . Apps running locally without network access. Apps that need privacy . Some native apps examples: camera, file manager, gallery, calculator, blog of notes, etc. Web apps # Web apps run on a server, providing service throught a browser. Pros and cons # Pros : Simple development. Only one app needs to be developed. Maintainability . Updated directly on the server, not for each mobile. Cons : Low efficiency. Unable to make proper use of the device\u2019s hardware and software . Is highly dependent on network technology. Usually slower responses. Recommended usage # Web apps are suitable for: Apps with a small budget . Service based Apps (no need of device access). Apps with centralised database access requirements. Apps whose content is constantly updated . Some web apps examples: Streaming (as YouTube ), news (as NBC News ), repositories (as GitHub ), online services (as ILovePDF ), etc. Hybrid apps # Many apps require some features from native apps and some from web apps . So why not make a hybrid app ? Hybrid apps seek to benefit from the best features of both paradigms . So they develop part of the app in a native way and another part in a web way, integrating both parts in a single app . Recommended usage # whenever native and web features are necessary. Some hybrid examples: Social network / chat / mail / cloud storage apps : Usually needs access to DB (web feature) but also access to hardware and memory\u2014i.e. camera, gallery or file manager\u2014(native feature). As Twitter , Whatsapp , Gmail or Drive , respectively. Localization / Maps apps : Usually needs acces to the map (web feature), but also so the GPS location (native feature). As Google Maps or Uber . Message-based apps # The not-so-well-known message-based apps , become important in regions with little network technology. The message-based apps are supported by messaging APIs like SMS , USSD or STK . See glossary . Mobile OS # Nowadays the main two OS are Android (open-source) an iOS , but it has not always been like this. There have been many other OS for mobiles throughout history: Windows Phone (Microsoft) Blackberry 10 (Blackberry) AliOS (Alibaba) Symbian (Nokia) Bada (Samsung) Firefox OS (Mozilla) Mer (Sailfish) Ubuntu Touch (Ubuntu) Tizen (Samsung) All of them have passed into history except for Tizen (used for werables). Topics about mobile development # Architecture and OS of mobiles. Software and technologies for mobile apps development. Mobile apps development for Android .","title":"Introducction"},{"location":"mobile_development/introducction/#introducction","text":"Nowadays mobiles are not only telephones, they are the most useful and used tool. The mobile development evolution is consequently very fast and the market is very changeable.","title":"Introducction"},{"location":"mobile_development/introducction/#glossary","text":"","title":"Glossary"},{"location":"mobile_development/introducction/#acronyms","text":"App : Application. GPS : Global Positioning System. OS : Operating System. SMS : Short Message/Messaging Service. STK : SIM Application Toolkit. USSD : Unstructured Supplementary Service Data.","title":"Acronyms"},{"location":"mobile_development/introducction/#mobile-apps","text":"One of the most important decisions when developing a mobile app is to decide whether it will be native or web app . Each of these options has its pros and cons.","title":"Mobile Apps"},{"location":"mobile_development/introducction/#native-apps","text":"Native apps run directly on the mobile.","title":"Native apps"},{"location":"mobile_development/introducction/#pros-and-cons","text":"Pros : Efficiency. Maximum software and hardware utilization : GPS , accelerometers, touchscreen, etc. More efficient apps . Allows privacy , as there is no need to send data over the network.. Cons : Expensive development. A different executable for each OS and hardware platform. Usually a different app for each OS . Need to be uploading new versions to the app store.","title":"Pros and cons"},{"location":"mobile_development/introducction/#recommended-usage","text":"Native apps are suitable for: Apps that need to interact with the device\u2019s hardware , memory or OS . Apps running locally without network access. Apps that need privacy . Some native apps examples: camera, file manager, gallery, calculator, blog of notes, etc.","title":"Recommended usage"},{"location":"mobile_development/introducction/#web-apps","text":"Web apps run on a server, providing service throught a browser.","title":"Web apps"},{"location":"mobile_development/introducction/#pros-and-cons_1","text":"Pros : Simple development. Only one app needs to be developed. Maintainability . Updated directly on the server, not for each mobile. Cons : Low efficiency. Unable to make proper use of the device\u2019s hardware and software . Is highly dependent on network technology. Usually slower responses.","title":"Pros and cons"},{"location":"mobile_development/introducction/#recommended-usage_1","text":"Web apps are suitable for: Apps with a small budget . Service based Apps (no need of device access). Apps with centralised database access requirements. Apps whose content is constantly updated . Some web apps examples: Streaming (as YouTube ), news (as NBC News ), repositories (as GitHub ), online services (as ILovePDF ), etc.","title":"Recommended usage"},{"location":"mobile_development/introducction/#hybrid-apps","text":"Many apps require some features from native apps and some from web apps . So why not make a hybrid app ? Hybrid apps seek to benefit from the best features of both paradigms . So they develop part of the app in a native way and another part in a web way, integrating both parts in a single app .","title":"Hybrid apps"},{"location":"mobile_development/introducction/#recommended-usage_2","text":"whenever native and web features are necessary. Some hybrid examples: Social network / chat / mail / cloud storage apps : Usually needs access to DB (web feature) but also access to hardware and memory\u2014i.e. camera, gallery or file manager\u2014(native feature). As Twitter , Whatsapp , Gmail or Drive , respectively. Localization / Maps apps : Usually needs acces to the map (web feature), but also so the GPS location (native feature). As Google Maps or Uber .","title":"Recommended usage"},{"location":"mobile_development/introducction/#message-based-apps","text":"The not-so-well-known message-based apps , become important in regions with little network technology. The message-based apps are supported by messaging APIs like SMS , USSD or STK . See glossary .","title":"Message-based apps"},{"location":"mobile_development/introducction/#mobile-os","text":"Nowadays the main two OS are Android (open-source) an iOS , but it has not always been like this. There have been many other OS for mobiles throughout history: Windows Phone (Microsoft) Blackberry 10 (Blackberry) AliOS (Alibaba) Symbian (Nokia) Bada (Samsung) Firefox OS (Mozilla) Mer (Sailfish) Ubuntu Touch (Ubuntu) Tizen (Samsung) All of them have passed into history except for Tizen (used for werables).","title":"Mobile OS"},{"location":"mobile_development/introducction/#topics-about-mobile-development","text":"Architecture and OS of mobiles. Software and technologies for mobile apps development. Mobile apps development for Android .","title":"Topics about mobile development"},{"location":"project_management/introducction/","text":"Introducction # Project management consists of managing resources in the best possible way to chieve the company\u2019s objectives efficiently. Glossary # Definitions # - Organization : A group of people who work together in an organized way for a shared purpose. Cambridge Dicctionary - Vision : Outlines what you want to become and how you want to impact society and its people. Future-focused. Quick Sprout - Mision : Primary goals, purposes, and values of an organization. Present-focused. Quick Sprout - Resources : Capital and workers. - Project : A project is a temporary endeavor undertaken by a company or organization, i.e. creation of a new product or service. Northeastern University - Program : A group of projects that are similar or related to one another, and which are often managed and coordinated as a group instead of independently. Northeastern University - Portfolio : A group of different programs and/or projects within the same organization, which may be related or unrelated to one another. Northeastern University - Internal service : A service for organization \u2018s employees. - External service : A service for organization \u2018s clients. Acronyms # - NGO : Non-Governmental Organization. - IT : Information Technology. Orgatization # Organizations are guided by theirs vision and mission , so they must manage their resources efficiently to fulfil them. This gap (the \u201cmanage\u201d) between vision and mission and resources is where project management comes in. As the figure shows, an entire organizatinal strategy is planned. Then this strategy leads to the management of portfolios , programs and projects . Attitude towards change # The organizatinal strategy and project planning seems to be static\u2014planned for a whole year, and then it is nerver touched again\u2014but is not. The world is constantly changing and organizations that want to survive must do so as well. Project management methodologies # For project management it is necessary to define an appropriate methodology. There are some of them: SCRUM (software development) PMBOK KANBAN Portfolios , programs and projects # See glossary . The idea is to group the resources of related projects , so that resources are better utilized and easier to organize. As the figure shows there is a hierarchy: Portfolios > Programs > Project . Strategic considerations for initiating projects # There are many reasons for an organization to initiate projects. There are some examples: Market Demand : An automobile manufacturing company authorizes a project that will build more efficient cars. Business needs/opportunities : A training company creates a new course to increase revenue. Organizational Needs : Due to high costs, a company could combine its administrative staffing functions with the order taking processes to reduce costs. Customer requests : An electric utility authorizes a project to serve a new industrial park. Technology Advances : A company authorizing a new project to develop a faster and cheaper laptop. Legal requirements : A chemical company authorizes a project to establish guidelines for handling a new toxic material. Ecological impact : A company authorizes a project to reduce its environmental impact. Social needs : An NGO authorizes a project in a developing country to provide drinking water systems and health education to prevent cholera. Software projects # Where is the software in project management? IT department # Organizations are usually organized in departments. Software is usually in the IT department. The IT department: Offers internal and external services . Supports workflows. Is essential to the business.","title":"Introducction"},{"location":"project_management/introducction/#introducction","text":"Project management consists of managing resources in the best possible way to chieve the company\u2019s objectives efficiently.","title":"Introducction"},{"location":"project_management/introducction/#glossary","text":"","title":"Glossary"},{"location":"project_management/introducction/#definitions","text":"- Organization : A group of people who work together in an organized way for a shared purpose. Cambridge Dicctionary - Vision : Outlines what you want to become and how you want to impact society and its people. Future-focused. Quick Sprout - Mision : Primary goals, purposes, and values of an organization. Present-focused. Quick Sprout - Resources : Capital and workers. - Project : A project is a temporary endeavor undertaken by a company or organization, i.e. creation of a new product or service. Northeastern University - Program : A group of projects that are similar or related to one another, and which are often managed and coordinated as a group instead of independently. Northeastern University - Portfolio : A group of different programs and/or projects within the same organization, which may be related or unrelated to one another. Northeastern University - Internal service : A service for organization \u2018s employees. - External service : A service for organization \u2018s clients.","title":"Definitions"},{"location":"project_management/introducction/#acronyms","text":"- NGO : Non-Governmental Organization. - IT : Information Technology.","title":"Acronyms"},{"location":"project_management/introducction/#orgatization","text":"Organizations are guided by theirs vision and mission , so they must manage their resources efficiently to fulfil them. This gap (the \u201cmanage\u201d) between vision and mission and resources is where project management comes in. As the figure shows, an entire organizatinal strategy is planned. Then this strategy leads to the management of portfolios , programs and projects .","title":"Orgatization"},{"location":"project_management/introducction/#attitude-towards-change","text":"The organizatinal strategy and project planning seems to be static\u2014planned for a whole year, and then it is nerver touched again\u2014but is not. The world is constantly changing and organizations that want to survive must do so as well.","title":"Attitude towards change"},{"location":"project_management/introducction/#project-management-methodologies","text":"For project management it is necessary to define an appropriate methodology. There are some of them: SCRUM (software development) PMBOK KANBAN","title":"Project management methodologies"},{"location":"project_management/introducction/#portfolios-programs-and-projects","text":"See glossary . The idea is to group the resources of related projects , so that resources are better utilized and easier to organize. As the figure shows there is a hierarchy: Portfolios > Programs > Project .","title":"Portfolios, programs and projects"},{"location":"project_management/introducction/#strategic-considerations-for-initiating-projects","text":"There are many reasons for an organization to initiate projects. There are some examples: Market Demand : An automobile manufacturing company authorizes a project that will build more efficient cars. Business needs/opportunities : A training company creates a new course to increase revenue. Organizational Needs : Due to high costs, a company could combine its administrative staffing functions with the order taking processes to reduce costs. Customer requests : An electric utility authorizes a project to serve a new industrial park. Technology Advances : A company authorizing a new project to develop a faster and cheaper laptop. Legal requirements : A chemical company authorizes a project to establish guidelines for handling a new toxic material. Ecological impact : A company authorizes a project to reduce its environmental impact. Social needs : An NGO authorizes a project in a developing country to provide drinking water systems and health education to prevent cholera.","title":"Strategic considerations for initiating projects"},{"location":"project_management/introducction/#software-projects","text":"Where is the software in project management?","title":"Software projects"},{"location":"project_management/introducction/#it-department","text":"Organizations are usually organized in departments. Software is usually in the IT department. The IT department: Offers internal and external services . Supports workflows. Is essential to the business.","title":"IT department"},{"location":"web_engineering/introducction/","text":"Introducction # Glossary # Internet : Computers net supported by TCP/IP protocol. PC Era : Before the Web . Acronyms # AI : Artificial Intelligence. CSS : Cascading Style Sheet. DB : Data Base. DL : Deep Learning. DOM : Document Object Model. HTML : HyperText Markup Language. IoT : Internet of Things. OWL : Web Ontology Language. PC : Personal Computer. SPARQL : Semantic Protocol And RDF Query Language. Web : World Wide Web . W3C : World Wide Web Consortium . XHTML : Extensible HyperText Markup Language. XML : Extensible Markup Language. XSLT Extensible Stylesheet Language. Protocols # IP : Internet Protocol. (Internet layer) TCP : Transmission Control Protocol. (Transport layer) HTTP : Hypertext Transfer Protocol. (Application layer) The Web # The Web is one service deployed over Internet . The main file in the Web is the HTML . The Web is supported by HTTP over TCP/IP . The Web is standardised by W3C since 1994. The Web has evolved from PC Era to Web 4.0. Web 1.0 # Started in 1991. People connecting to servers. Static webs. Few content producers / Many readers. Rreduced interaction. Tecnologies: # HTTP as application protocol. HTML as information document. Web 2.0 # Started in 2004. People connecting to people. Blogs and social networks began. Sharing contents. Communities. Tecnologies # XHTML and CSS to data presentation. DOM for interactivity. XML and XSLT for information sharing. JavaScript and Ajax. Web 3.0 # Started in 2010. Semantic web. Software capable of process, reason and logic deduction. Well-labeled information. Tecnologies # OWL-S for ontology. SPARQL for DB queries. Web 4.0 # Started in 2020. Distributed resources. Configurable services. Massively scalable services. Cloud computing, portability, IoT, AI and DL. New interfaces (i.e. voice interfaces). Web applications # This has been the evolution of web applications: Document centric : Static HTML . Interactive : Dynamic HTML generation. Transactional : DB queries and transactions. Workflow-based : To manage workflows across departments, organisations and companies, etc. Collaborative : Shared projects and information. Portal-oriented (Website) : Offers a broad array of resources and services\u2014usually related. Ubiquitous : Services to be accessed anywhere and anytime. Knowledge based : Personalized based on data. Cloud computing : Computing and storage as a service.","title":"Introducction"},{"location":"web_engineering/introducction/#introducction","text":"","title":"Introducction"},{"location":"web_engineering/introducction/#glossary","text":"Internet : Computers net supported by TCP/IP protocol. PC Era : Before the Web .","title":"Glossary"},{"location":"web_engineering/introducction/#acronyms","text":"AI : Artificial Intelligence. CSS : Cascading Style Sheet. DB : Data Base. DL : Deep Learning. DOM : Document Object Model. HTML : HyperText Markup Language. IoT : Internet of Things. OWL : Web Ontology Language. PC : Personal Computer. SPARQL : Semantic Protocol And RDF Query Language. Web : World Wide Web . W3C : World Wide Web Consortium . XHTML : Extensible HyperText Markup Language. XML : Extensible Markup Language. XSLT Extensible Stylesheet Language.","title":"Acronyms"},{"location":"web_engineering/introducction/#protocols","text":"IP : Internet Protocol. (Internet layer) TCP : Transmission Control Protocol. (Transport layer) HTTP : Hypertext Transfer Protocol. (Application layer)","title":"Protocols"},{"location":"web_engineering/introducction/#the-web","text":"The Web is one service deployed over Internet . The main file in the Web is the HTML . The Web is supported by HTTP over TCP/IP . The Web is standardised by W3C since 1994. The Web has evolved from PC Era to Web 4.0.","title":"The Web"},{"location":"web_engineering/introducction/#web-10","text":"Started in 1991. People connecting to servers. Static webs. Few content producers / Many readers. Rreduced interaction.","title":"Web 1.0"},{"location":"web_engineering/introducction/#tecnologies","text":"HTTP as application protocol. HTML as information document.","title":"Tecnologies:"},{"location":"web_engineering/introducction/#web-20","text":"Started in 2004. People connecting to people. Blogs and social networks began. Sharing contents. Communities.","title":"Web 2.0"},{"location":"web_engineering/introducction/#tecnologies_1","text":"XHTML and CSS to data presentation. DOM for interactivity. XML and XSLT for information sharing. JavaScript and Ajax.","title":"Tecnologies"},{"location":"web_engineering/introducction/#web-30","text":"Started in 2010. Semantic web. Software capable of process, reason and logic deduction. Well-labeled information.","title":"Web 3.0"},{"location":"web_engineering/introducction/#tecnologies_2","text":"OWL-S for ontology. SPARQL for DB queries.","title":"Tecnologies"},{"location":"web_engineering/introducction/#web-40","text":"Started in 2020. Distributed resources. Configurable services. Massively scalable services. Cloud computing, portability, IoT, AI and DL. New interfaces (i.e. voice interfaces).","title":"Web 4.0"},{"location":"web_engineering/introducction/#web-applications","text":"This has been the evolution of web applications: Document centric : Static HTML . Interactive : Dynamic HTML generation. Transactional : DB queries and transactions. Workflow-based : To manage workflows across departments, organisations and companies, etc. Collaborative : Shared projects and information. Portal-oriented (Website) : Offers a broad array of resources and services\u2014usually related. Ubiquitous : Services to be accessed anywhere and anytime. Knowledge based : Personalized based on data. Cloud computing : Computing and storage as a service.","title":"Web applications"}]}